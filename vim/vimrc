" ############## 플러그인 #########################################################################
let mapleader = "`"
set nocompatible " Vim 디폴트 기능들을 사용함, polyglot, gutentags 등 플러그인 호환성 문제를 피하기 위함

" vim-plug 설치 시작
call plug#begin('~/.vim/plugged')

	" Airline - 상태줄
	" :AirlineToggle, :AirlineTheme <theme>
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	" Airline theme dracula"
	Plug 'dracula/vim', { 'as': 'dracula' }
	" Airline theme: Catppuccin
	Plug 'catppuccin/vim', { 'as': 'catppuccin' }
	
	" Color Scheme
	Plug 'joshdick/onedark.vim'

	" Supertab - 탭 자동완성
	" :SuperTab, :SuperTabNext, :SuperTabPrev
	Plug 'ervandew/supertab'

	" FZF - 파일 검색 및 명령어 실행
	" :FZF, :Files, :GFiles, :Buffers, :Lines, :Ag, :Rg
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim'

	" CoC - Language Server Protocol (LSP) support
	" :CoCInstall <extension>, :CocCommand <command>
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	let g:coc_global_extensions = ['coc-clangd', 'coc-sh', 'coc-pairs', 'coc-json', 'coc-yaml']
	let g:coc_user_config = { 'coc.preferences.semanticTokens': v:true }
	" CoC - format on save
	augroup CocGroup
	  autocmd!
	  autocmd BufWritePre * if CocHasProvider('format') | call CocAction('format') | endif
	augroup END

	" Signify - Git diff signs
	" :SignifyDiff, :SignifyHunkDiff
	if has('nvim') || has('patch-8.0.902')
	  Plug 'mhinz/vim-signify'
	else
	  Plug 'mhinz/vim-signify', { 'tag': 'legacy' }
	endif
	" default updatetime 4000ms is not good for async update
	set updatetime=100

	" Vim Polyglot - Language packs
	Plug 'sheerun/vim-polyglot'

	" Gutentags - Automatic tags generation
	" :GutentagsUpdate
	" Disable it since ctags is too slow for large projects...
	"Plug 'ludovicchabant/vim-gutentags'

	" NERDTree - File explorer
	" :NERDTreeToggle (F5 to open), :NERDTreeFind, :NERDTreeClose
	Plug 'preservim/nerdtree'

	" Fugitive - Git integration
	" :Git status, :Git commit, :Git push, :Git pull
	Plug 'tpope/vim-fugitive'

	" Copilot - AI code completion
	Plug 'github/copilot.vim'
	highlight CopilotSuggestion guifg=#5f87ff ctermfg=75
	imap <C-k> <Plug>(copilot-next)
	imap <C-j> <Plug>(copilot-previous)

	" Telescope - Fuzzy finder
	Plug 'nvim-lua/plenary.nvim'
	Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.8' }

	" Treesitter - Syntax highlighting and code parsing
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update

call plug#end()

" Airline - enable buffer tab, show filename to buffer tab
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_theme = 'catppuccin_frappe' " 기본 테마 설정
" Color Scheme
colorscheme catppuccin_frappe


" ############## 기본 설정 #########################################################################

set enc=utf-8
set fencs=utf-8,euckr

" 파일의 종류를 자동으로 인식 "
filetype on
filetype plugin on
filetype indent on

" 자동 문법 강조 "
syntax on 

set nocompatible         " Vim 디폴트 기능들을 사용함 "
set number                " 줄 번호를 붙임  "
set backspace=2         " 삽입 모드에서 백스페이스를 계속 허용 "
set autoindent             " 자동 들여쓰기 "
set cindent             " C 언어 자동 들여쓰기 "
set smartindent         " 역시 자동 들여쓰기 "
set nowrap                 " 자동 줄바꿈 안함  "
set nowrapscan             " 찾기에서 파일의 맨 끝에 이르면 계속하여 찾지 않음 "
set ignorecase             " 찾기에서 대/소문자를 구별하지 않음 "
set incsearch             " 점진적으로 찾기  "
set nobackup             " 백업파일을 만들지 않음 "
set nojoinspaces         " J 명령어로 줄을 붙일 때 마침표 뒤에 한칸만 띔 "
set ruler                 " 상태표시줄에 커서 위치를 보여줌 "
set tabstop=4             " 간격 "
set shiftwidth=4         " 자동 들여쓰기 간격 "
set keywordprg=ydic        " K를 눌렀을 때 실행할 명령어 "
set showcmd             " (부분적인)명령어를 상태라인에 보여줌 "
set showmatch             " 매치되는 괄호의 반대쪽을 보여줌 "
set autowrite             " :next나  :make 같은 명령를 입력하면 자동으로 저장 "
set linespace=3         " 줄간격 "
set title                 " 타이틀바에 현재 편집중인 파일을 표시 "
set laststatus=2         " 상태줄을 항상 표시 "
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\ %t     " 다중 문서 작업을 위한 Status 줄 "
set hidden 				" 버퍼를 수정한 직후 버퍼를 감춘다.
set grepprg=grep\-nH\ $* 
set colorcolumn=81       " 80번째 열에 컬럼 표시
"set shellslash


" #################### 단축키 설정  ######################################################################


" ---------- 함수 -----------------------------------------
" '< , '> : 비주얼 모드 블럭
" norm : 노말모드
func! CmtOn()    "주석 on
	exe "'<,'>norm i//"
endfunc

func! CmtOff()    "주석 off
	exe "'<,'>norm 2x"
endfunc

"---------- 정의, 설정 -----------------------------------Lock'

"ctags
"set tags=./tags
"set tags+=/opt/tags
"set tags+=/usr/tags
"cscope
"cs add /opt/cscope.out
"cs add /usr/cscope.out


"---------- 키맵 ------------------------------------------

"버퍼 새로열기
nmap <leader>b :enew<CR>
"다음 버퍼로
nmap <leader>h :bprevious<CR>
"이전 버퍼로
nmap <leader>l :bn<CR>
" 특정 버퍼 인덱스로
nmap <leader>1 :b 1<CR>
nmap <leader>2 :b 2<CR>
nmap <leader>3 :b 3<CR>
nmap <leader>4 :b 4<CR>
nmap <leader>5 :b 5<CR>
nmap <leader>6 :b 6<CR>
nmap <leader>7 :b 7<CR>
nmap <leader>8 :b 8<CR>
nmap <leader>9 :b 9<CR>
"현재 버퍼를 닫고 이전 버퍼로 이동
nmap <leader>q :bp <BAR> bd #<CR>
"모든 버퍼와 각 버퍼상태 출력
nmap <leader>p :Buffers<CR>
"현재 버퍼 강제 저장
nmap <leader>w ::w!<CR>

"터미널 설정 
nmap <leader>t :enew<CR>:term<CR>i
tnoremap \\ <C-\><C-n>
" 터미널 버퍼 이름 자동 변경
autocmd TermOpen * execute 'file shell:' . bufnr('%')

"입력모드 빠져나가기
imap \\ <ESC>

"현재 커서에서 새로운줄 삽입
map <C-J> i<CR><ESC>
"비주얼모드에서 주석 처리
vmap <C-c> <esc>:call CmtOn() <cr>
"비주얼모드에서 주석 해제
vmap <C-x> <esc>:call CmtOff() <cr>
"노말모드에서 주석 처리
nmap <C-c> <esc>v:call CmtOn() <cr>
"노말모드에서 주석 해제
nmap <C-x> <esc>v:call CmtOff() <cr>

nmap <F5> :NERDTreeToggle<CR>B

" Use <C-p> to open FZF file finder
nmap <C-p> :Files ~<CR>
" Use <C-a> to open FZF Ag command
nmap <C-a> :Ag<CR>

nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" Telescope - Find files using Telescope command-line sugar.
nmap <leader>ff :Telescope find_files<CR>
nmap <leader>fg :Telescope live_grep<CR>
nmap <leader>fb :Telescope buffers<CR>
nmap <leader>fh :Telescope help_tags<CR>

" Treesitter 
lua << EOF
require('nvim-treesitter.configs').setup{
	highlight={
		enable=true
	},
	indent={
		enable=true
	},  
	ensure_installed = {
		"c", "cpp", "python", "javascript", "typescript", "html", "css", "lua", "bash", "json", "yaml"
	},
}
EOF
