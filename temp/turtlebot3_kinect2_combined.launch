<launch>
	<arg name="database_path"	  default="rtabmap.db"/>
	<arg name="localization"	  default="false"/>
	<arg name="rgbd_odometry"     default="false"/>
	<arg name="rtabmapviz"        default="false"/>
	<arg name="rviz"			  default="true"/>
	<arg name="args"			  default="--delete_db_on_start"/>
	<arg name="rviz_cfg"		  default="$(find turtlebot3_bringup)/launch/config/rgbd.rviz"/>
	<arg name="rtabmap_cfg"		  default="$(find turtlebot3_bringup)/launch/config/rtabmap.ini"/>
	<arg name="rtabmapviz_cfg"	  default="$(find turtlebot3_bringup)/launch/config/rgbd_gui.ini"/>
	<arg name="resolution"		  default="qhd"/>
	<arg name="navigation"		  default="false"/>

	<arg name="wait_for_transform"  default="3.0"/> 

	<arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>

	<arg name="cmd_vel_topic" default="/cmd_vel" />
	<arg name="vo_topic"   default="/rtabmap/odom"/>
	<arg name="wo_topic"   default="/robot/odom"/>
	<arg name="odom_topic" default="/rtabmap/odometry/filtered" />

	<arg name="odom_frame_id" default="odom"/>
	<arg name="base_frame_id"	default="base_footprint"/>
	<arg name="map_frame_id"	default="map"/>
 
   <!-- ODOMETRY MAIN ARGUMENTS: 
        -"strategy"        : Strategy: Frame-to-Map 1=Frame-To-Frame
        -"feature"         : Feature type: 0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK
        -"nn"              : Nearest neighbor strategy : 0=Linear, 1=FLANN_KDTREE, 2=FLANN_LSH, 3=BRUTEFORCE 
                             Set to 1 for float descriptor like SIFT/SURF                  
                             Set to 3 for binary descriptor like ORB/FREAK/BRIEF/BRISK  
        -"max_depth"       : Maximum features depth (m)  
        -"min_inliers"     : Minimum visual correspondences to accept a transformation (m)  
        -"inlier_distance" : RANSAC maximum inliers distance (m)  
        -"local_map"       : Local map size: number of unique features to keep track 
    -->
   <arg name="strategy" default="0" />
   <arg name="feature" default="2" />
   <arg name="nn" default="1" />
   <arg name="max_depth" default="10.0" />
   <arg name="max_features" default="1000" />
   <arg name="min_inliers" default="25" />
   <arg name="inlier_distance" default="0.01" />
   <arg name="local_map" default="50" />
 

	<!-- Connect to Kinect V2 -->	
	<include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch"/>

	<!-- Connect to Turtlebot3 -->
	<include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote_kinect.launch">
		<arg name="model" value="waffle_kinect"/>
	</include>

	<!-- Start IMU Filter -->
	<include file="$(find imu_complementary_filter)/launch/complementary_filter.launch"/>


	<!-- Start Navigation Stack -->
	<!-- AMCL -->
	<include if="$(arg navigation)" file="$(find turtlebot3_navigation)/launch/amcl.launch.xml"/>

	<!-- move_base -->
	<node if="$(arg navigation)" pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />

		<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
		<rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
		<rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
		<rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params.yaml" command="load" />

		<remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
		<remap from="odom" to="$(arg odom_topic)"/>
	</node>

	
	<!-- Start Rtabmap -->
	<group ns="rtabmap">
		
  		
		<!-- Odometry -->
		<node if="$(arg rgbd_odometry)" pkg="rtabmap_ros" type="rgbd_odometry" name="visual_odometry" output="screen">
			<remap from="rgb/image" to="/kinect2/$(arg resolution)/image_color_rect"/>
			<remap from="depth/image" to="/kinect2/$(arg resolution)/image_depth_rect"/>
			<remap from="rgb/camera_info" to="/kinect2/$(arg resolution)/camera_info"/>

			<!-- Dont publish a odom->base_link tf, robot_localization will do that -->
			<param name="publish_tf" type="bool" value="false"/> 

			<param name="frame_id" type="string" value="$(arg base_frame_id)"/>
			<param name="approx_sync" type="bool" value="true"/>

			<param name="Odom/Strategy" type="string" value="$(arg strategy)"/> 
			<param name="Vis/FeatureType" type="string" value="$(arg feature)"/>  
			<param name="Vis/CorNNType" type="string" value="$(arg nn)"/>
			<param name="Vis/MaxDepth" type="string" value="$(arg max_depth)"/>  
			<param name="Vis/MinInliers" type="string" value="$(arg min_inliers)"/> 
			<param name="Vis/InlierDistance" type="string" value="$(arg inlier_distance)"/>       
			<param name="OdomF2M/MaxSize" type="string" value="$(arg local_map)"/>
			<param name="Odom/FillInfoData" type="string" value="$(arg rtabmapviz)"/>
			<param name="Vis/MaxFeatures" type="string" value="$(arg max_features)"/>
		</node>

		
		<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)">
			
			<!-- inputs -->
			<remap from="scan"            to="/scan"/>
			<remap from="rgb/image"       to="/kinect2/$(arg resolution)/image_color_rect"/>
			<remap from="depth/image"     to="/kinect2/$(arg resolution)/image_depth_rect"/>
			<remap from="rgb/camera_info" to="/kinect2/$(arg resolution)/camera_info"/>

			<!-- output -->
			<remap from="grid_map" to="/map"/>

			<!-- RTABMAP_ROS parameters -->
			<param name="database_path"       type="string" value="$(arg database_path)"/>
			<param name="frame_id"            type="string" value="$(arg base_frame_id)"/>

			<param name="map_frame_id"		  type="string" value="map"/>
			<param name="odom_frame_id"       type="string" value="$(arg odom_frame_id)"/>
			<param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
			<param name="subscribe_depth"     type="bool"   value="true"/>
			<param name="subscribe_scan"      type="bool"   value="false"/>
			<param name="gen_scan"			  type="bool"	value="false"/>
			<param name="approx_sync"		  type="bool" 	value="true"/>
			<param name="queue_size"		  type="int"	value="100"/>
			
			<!-- localization mode -->
			<param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
			<param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
			<param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/> 


			<!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
			<param name="Grid/3D" value="false"/>                                    <!--[A 3D occupancy grid is required if you want an Octomap. Set to false if you want only a 2D map, the cloud will be projected on xy plane. A 2D map can be still generated if checked, but it requires more memory and time to generate it. Ignored if laser scan is 2D and "Grid/FromDepth" is false.]-->
				<param name="Grid/3DGroundIsObstacle" value="false"/>                   <!--[[Grid/3D=true] Ground is an obstacle. Use this only if you want an Octomap with ground identified as an obstacle (e.g., with an UAV).]-->
			<param name="Grid/CellSize" value="0.05"/>                              <!--[Resolution of the occupancy grid.]-->
			<param name="Grid/DepthDecimation" value="4"/>                          <!--[[Grid/DepthDecimation=true] Decimation of the depth image before creating cloud. Negative decimation is done from RGB size instead of depth size (if depth is smaller than RGB, it may be interpolated depending of the decimation value).]-->
			<param name="Grid/FromDepth" value="true"/>                             <!--[Create occupancy grid from depth image(s), otherwise it is created from laser scan.]-->
				<param name="Grid/DepthMax" value="4.0"/>                               <!--[[Grid/FromDepth=true] Maximum cloud's depth from sensor. 0=inf.]-->
				<param name="Grid/DepthMin" value="0.0"/>                               <!--[[Grid/FromDepth=true] Minimum cloud's depth from sensor.]-->
				<param name="Grid/DepthRoiRatios" value="0.0 0.0 0.0 0.0"/>             <!--[[Grid/FromDepth=true] Region of interest ratios [left, right, top, bottom].]-->
			<param name="Grid/FootprintHeight" value="0.06"/>                        <!--[Footprint height used to filter points over the footprint of the robot. Footprint length and width should be set.]-->
			<param name="Grid/FootprintLength" value="0.3"/>                        <!--[Footprint length used to filter points over the footprint of the robot.]-->
			<param name="Grid/FootprintWidth" value="0.3"/>                         <!--[Footprint width used to filter points over the footprint of the robot. Footprint length should be set.]-->
			<param name="Grid/MapFrameProjection" value="false"/>                   <!--[Projection in map frame. On a 3D terrain and a fixed local camera transform (the cloud is created relative to ground), you may want to disable this to do the projection in robot frame instead.]-->
<!---->		<param name="Grid/MaxGroundHeight" value="0.1"/>                        <!--[Maximum ground height (0=disabled). Should be set if "Grid/NormalsSegmentation" is true.]-->
<!---->		<param name="Grid/MaxObstacleHeight" value="0.3"/>                      <!--[Maximum obstacles height (0=disabled).]-->
<!---->		<param name="Grid/MinGroundHeight" value="0.0"/>                        <!--[Minimum ground height (0=disabled).]-->
			<param name="Grid/NoiseFilteringMinNeighbors" value="5"/>               <!--[Noise filtering minimum neighbors.]-->
			<param name="Grid/NoiseFilteringRadius" value="0.00"/>                   <!--[Noise filtering radius (0=disabled). Done after segmentation.]-->
			<param name="Grid/NormalsSegmentation" value="true"/>                   <!--[Segment ground from obstacles using point normals, otherwise a fast passthrough is used.]-->
				<param name="Grid/ClusterRadius" value="0.1"/>                          <!--[[Grid/NormalsSegmentation=true] Cluster maximum radius.]-->
				<param name="Grid/FlatObstacleDetected" value="false"/>                  <!--[[Grid/NormalsSegmentation=true] Flat obstacles detected.]-->
				<param name="Grid/MaxGroundAngle" value="45"/>                          <!--[[Grid/NormalsSegmentation=true] Maximum angle (degrees) between point's normal to ground's normal to label it as ground. Points with higher angle difference are considered as obstacles.]-->
				<param name="Grid/MinClusterSize" value="10"/>                          <!--[[Grid/NormalsSegmentation=true] Minimum cluster size to project the points.]-->
				<param name="Grid/NormalK" value="10"/>                                 <!--[[Grid/NormalsSegmentation=true] K neighbors to compute normals.]-->
			<param name="Grid/Scan2dMaxFilledRange" value="4.0"/>                   <!--[Unknown space filled maximum range. If 0, the laser scan maximum range is used.]-->
			<param name="Grid/Scan2dUnknownSpaceFilled" value="false"/>             <!--[Unknown space filled. Only used with 2D laser scans.]-->
			<param name="Grid/ScanDecimation" value="1"/>                           <!--[[Grid/FromDepth=false] Decimation of the laser scan before creating cloud.]-->

			<param name="Kp/BadSignRatio" value="0.5"/>                             <!--[Bad signature ratio (less than Ratio x AverageWordsPerImage = bad).]-->
<!---->		<param name="Kp/DetectorStrategy" value="2"/>                           <!--[0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK 8=GFTT/ORB.]-->
			<param name="Kp/DictionaryPath" value=""/>                              <!--[Path of the pre-computed dictionary]-->
			<param name="Kp/IncrementalDictionary" value="true"/>                   <!--[]-->
			<param name="Kp/IncrementalFlann" value="true"/>                        <!--[When using FLANN based strategy, add/remove points to its index without always rebuilding the index (the index is built only when the dictionary doubles in size).]-->
			<param name="Kp/MaxDepth" value="0"/>                                   <!--[Filter extracted keypoints by depth (0=inf).]-->
<!---->		<param name="Kp/MaxFeatures" value="150"/>                              <!--[Maximum features extracted from the images (0 means not bounded, <0 means no extraction).]-->
			<param name="Kp/MinDepth" value="0"/>                                   <!--[Filter extracted keypoints by depth.]-->
			<param name="Kp/NNStrategy" value="1"/>                                 <!--[kNNFlannNaive=0, kNNFlannKdTree=1, kNNFlannLSH=2, kNNBruteForce=3, kNNBruteForceGPU=4]-->
			<param name="Kp/NewWordsComparedTogether" value="true"/>                <!--[When adding new words to dictionary, they are compared also with each other (to detect same words in the same signature).]-->
			<param name="Kp/NndrRatio" value="0.8"/>                                <!--[NNDR ratio (A matching pair is detected, if its distance is closer than X times the distance of the second nearest neighbor.)]-->
			<param name="Kp/Parallelized" value="true"/>                            <!--[If the dictionary update and signature creation were parallelized.]-->
			<param name="Kp/RoiRatios" value="0.0 0.0 0.0 0.0"/>                    <!--[Region of interest ratios [left, right, top, bottom].]-->
			<param name="Kp/SubPixEps" value="0.02"/>                               <!--[See cv::cornerSubPix().]-->
			<param name="Kp/SubPixIterations" value="0"/>                           <!--[See cv::cornerSubPix(). 0 disables sub pixel refining.]-->
			<param name="Kp/SubPixWinSize" value="3"/>                              <!--[See cv::cornerSubPix().]-->
			<param name="Kp/TfIdfLikelihoodUsed" value="true"/>                     <!--[Use of the td-idf strategy to compute the likelihood.]-->

			<param name="Mem/BadSignaturesIgnored" value="false"/>                  <!--[Bad signatures are ignored.]-->
			<param name="Mem/BinDataKept" value="true"/>                            <!--[Keep binary data in db.]-->
			<param name="Mem/GenerateIds" value="true"/>                            <!--[True=Generate location IDs, False=use input image IDs.]-->
			<param name="Mem/ImageKept" value="false"/>                             <!--[Keep raw images in RAM.]-->
			<param name="Mem/ImagePostDecimation" value="1"/>                       <!--[Image decimation (>=1) of saved data in created signatures (after features extraction). Decimation is done from the original image. Negative decimation is done from RGB size instead of depth size (if depth is smaller than RGB, it may be interpolated depending of the decimation value).]-->
			<param name="Mem/ImagePreDecimation" value="1"/>                        <!--[Image decimation (>=1) before features extraction. Negative decimation is done from RGB size instead of depth size (if depth is smaller than RGB, it may be interpolated depending of the decimation value).]-->
			<param name="Mem/InitWMWithAllNodes" value="false"/>                    <!--[Initialize the Working Memory with all nodes in Long-Term Memory. When false, it is initialized with nodes of the previous session.]-->
			<param name="Mem/LaserScanDownsampleStepSize" value="1"/>               <!--[If > 1, downsample the laser scans when creating a signature.]-->
			<param name="Mem/LaserScanNormalK" value="0"/>                          <!--[If > 0 and laser scans are 3D without normals, normals will be computed with K search neighbors when creating a signature.]-->
			<param name="Mem/MapLabelsAdded" value="true"/>                         <!--[Create map labels. The first node of a map will be labelled as "map#" where # is the map ID.]-->
			<param name="Mem/NotLinkedNodesKept" value="true"/>                     <!--[Keep not linked nodes in db (rehearsed nodes and deleted nodes).]-->
			<param name="Mem/RawDescriptorsKept" value="true"/>                     <!--[Raw descriptors kept in memory.]-->
			<param name="Mem/RecentWmRatio" value="0.2"/>                           <!--[Ratio of locations after the last loop closure in WM that cannot be transferred.]-->
			<param name="Mem/ReduceGraph" value="false"/>                           <!--[Reduce graph. Merge nodes when loop closures are added (ignoring those with user data set).]-->
			<param name="Mem/RehearsalIdUpdatedToNewOne" value="false"/>            <!--[On merge, update to new id. When false, no copy.]-->
			<param name="Mem/RehearsalSimilarity" value="0.6"/>                     <!--[Rehearsal similarity.]-->
			<param name="Mem/RehearsalWeightIgnoredWhileMoving" value="false"/>     <!--[When the robot is moving, weights are not updated on rehearsal.]-->
			<param name="Mem/STMSize" value="10"/>                                  <!--[Short-term memory size.]-->
			<param name="Mem/SaveDepth16Format" value="false"/>                     <!--[Save depth image into 16 bits format to reduce memory used. Warning: values over ~65 meters are ignored (maximum 65535 millimeters).]-->
			<param name="Mem/TransferSortingByWeightId" value="false"/>             <!--[On transfer, signatures are sorted by weight->ID only (i.e. the oldest of the lowest weighted signatures are transferred first). If false, the signatures are sorted by weight->Age->ID (i.e. the oldest inserted in WM of the lowest weighted signatures are transferred first). Note that retrieval updates the age, not the ID.]-->
			<param name="Mem/UseOdomFeatures" value="false"/>                       <!--[Use odometry features.]-->

			
			<param name="Optimizer/Epsilon" value="0.00001"/>                       <!--[Stop optimizing when the error improvement is less than this value.]-->
			<param name="Optimizer/Iterations" value="100"/>                        <!--[Optimization iterations.]-->
			<param name="Optimizer/Robust" value="false"/>                          <!--[Robust graph optimization using Vertigo (only work for g2o and GTSAM optimization strategies). Not compatible with "RGBD/OptimizeMaxError" if enabled.]-->
<!---->		<param name="Optimizer/Strategy" value="0"/>                            <!--[Graph optimization strategy: 0=TORO, 1=g2o and 2=GTSAM.]-->
			<param name="Optimizer/VarianceIgnored" value="false"/>                 <!--[Ignore constraints' variance. If checked, identity information matrix is used for each constraint. Otherwise, an information matrix is generated from the variance saved in the links.]-->
			<param name="Optimizer/Slam2D" value="true"/>

			<param name="RGBD/AngularUpdate" value="0.01"/>                          <!--[Minimum angular displacement to update the map. Rehearsal is done prior to this, so weights are still updated.]-->
			<param name="RGBD/CreateOccupancyGrid" value="true"/>                   <!--[Create local occupancy grid maps. See "Grid" group for parameters.]-->
			<param name="RGBD/Enabled" value="true"/>                               <!--[]-->
			<param name="RGBD/GoalReachedRadius" value="0.5"/>                      <!--[Goal reached radius (m).]-->
			<param name="RGBD/GoalsSavedInUserData" value="false"/>                 <!--[When a goal is received and processed with success, it is saved in user data of the location with this format: "GOAL:#".]-->
			<param name="RGBD/LinearUpdate" value="0.1"/>                           <!--[Minimum linear displacement to update the map. Rehearsal is done prior to this, so weights are still updated.]-->
			<param name="RGBD/LocalImmunizationRatio" value="0.25"/>                <!--[Ratio of working memory for which local nodes are immunized from transfer.]-->
			<param name="RGBD/LocalRadius" value="10"/>                             <!--[Local radius (m) for nodes selection in the local map. This parameter is used in some approaches about the local map management.]-->
			<param name="RGBD/LoopClosureReextractFeatures" value="false"/>         <!--[Extract features even if there are some already in the nodes.]-->
			<param name="RGBD/MaxLocalRetrieved" value="2"/>                        <!--[Maximum local locations retrieved (0=disabled) near the current pose in the local map or on the current planned path (those on the planned path have priority).]-->
			<param name="RGBD/NeighborLinkRefining" value="false"/>                 <!--[When a new node is added to the graph, the transformation of its neighbor link to the previous node is refined using registration approach selected (Reg/Strategy).]-->
			<param name="RGBD/NewMapOdomChangeDistance" value="0"/>                 <!--[A new map is created if a change of odometry translation greater than X m is detected (0 m = disabled).]-->
			<param name="RGBD/OptimizeFromGraphEnd" value="true"/>                 <!--[Optimize graph from the newest node. If false, the graph is optimized from the oldest node of the current graph (this adds an overhead computation to detect to oldest mode of the current graph, but it can be useful to preserve the map referential from the oldest node). Warning when set to false: when some nodes are transferred, the first referential of the local map may change, resulting in momentary changes in robot/map position (which are annoying in teleoperation).]-->
			<param name="RGBD/OptimizeMaxError" value="3"/>                         <!--[Reject loop closures if optimization error is greater than this value (0=disabled). This will help to detect when a wrong loop closure is added to the graph. Not compatible with "Optimizer/Robust" if enabled.]-->
			<param name="RGBD/PlanAngularVelocity" value="0"/>                      <!--[Angular velocity (rad/sec) used to compute path weights.]-->
			<param name="RGBD/PlanLinearVelocity" value="0"/>                       <!--[Linear velocity (m/sec) used to compute path weights.]-->
			<param name="RGBD/PlanStuckIterations" value="0"/>                      <!--[Mark the current goal node on the path as unreachable if it is not updated after X iterations (0=disabled). If all upcoming nodes on the path are unreachabled, the plan fails.]-->
			<param name="RGBD/ProximityAngle" value="45"/>                          <!--[Maximum angle (degrees) for visual proximity detection.]-->
			<param name="RGBD/ProximityBySpace" value="true"/>                      <!--[Detection over locations (in Working Memory or STM) near in space.]-->
			<param name="RGBD/ProximityByTime" value="false"/>                      <!--[Detection over all locations in STM.]-->
			<param name="RGBD/ProximityMaxGraphDepth" value="50"/>                  <!--[Maximum depth from the current/last loop closure location and the local loop closure hypotheses. Set 0 to ignore.]-->
			<param name="RGBD/ProximityMaxPaths" value="3"/>                        <!--[Maximum paths compared (from the most recent) for proximity detection by space. 0 means no limit.]-->
			<param name="RGBD/ProximityPathFilteringRadius" value="0.5"/>           <!--[Path filtering radius to reduce the number of nodes to compare in a path. A path should also be inside that radius to be considered for proximity detection.]-->
			<param name="RGBD/ProximityPathMaxNeighbors" value="10"/>               <!--[Maximum neighbor nodes compared on each path.]-->
			<param name="RGBD/ProximityPathRawPosesUsed" value="true"/>             <!--[When comparing to a local path, merge the scan using the odometry poses (with neighbor link optimizations) instead of the ones in the optimized local graph.]-->
			<param name="RGBD/ScanMatchingIdsSavedInLinks" value="true"/>           <!--[Save scan matching IDs in link's user data.]-->

<!---->		<param name="Reg/Force3DoF" value="true"/>                              <!--[Force 3 degrees-of-freedom transform (3Dof: x,y and yaw). Parameters z, roll and pitch will be set to 0.]-->
<!---->		<param name="Reg/Strategy" value="0"/>                                  <!--[0=Vis, 1=Icp, 2=VisIcp]-->
			<param name="Reg/VarianceFromInliersCount" value="false"/>              <!--[Set variance as the inverse of the number of inliers. Otherwise, the variance is computed as the average 3D position error of the inliers.]-->

			<param name="Rtabmap/CreateIntermediateNodes" value="false"/>           <!--[Create intermediate nodes between loop closure detection. Only used when Rtabmap/DetectionRate>0.]-->
			<param name="Rtabmap/DetectionRate" value="1"/>                         <!--[Detection rate. RTAB-Map will filter input images to satisfy this rate.]-->
			<param name="Rtabmap/ImageBufferSize" value="10"/>                       <!--[Data buffer size (0 min inf).]-->
			<param name="Rtabmap/LoopRatio" value="0"/>                             <!--[The loop closure hypothesis must be over LoopRatio x lastHypothesisValue.]-->
			<param name="Rtabmap/LoopThr" value="0.11"/>                            <!--[Loop closing threshold.]-->
			<param name="Rtabmap/MaxRetrieved" value="2"/>                          <!--[Maximum locations retrieved at the same time from LTM.]-->
			<param name="Rtabmap/MemoryThr" value="0"/>                             <!--[Maximum signatures in the Working Memory (ms) (0 means infinity).]-->
			<param name="Rtabmap/PublishLastSignature" value="true"/>               <!--[Publishing last signature.]-->
			<param name="Rtabmap/PublishLikelihood" value="true"/>                  <!--[Publishing likelihood.]-->
			<param name="Rtabmap/PublishPdf" value="true"/>                         <!--[Publishing pdf.]-->
			<param name="Rtabmap/PublishStats" value="true"/>                       <!--[Publishing statistics.]-->
			<param name="Rtabmap/StartNewMapOnLoopClosure" value="false"/>          <!--[Start a new map only if there is a global loop closure with a previous map.]-->
			<param name="Rtabmap/StatisticLogged" value="false"/>                   <!--[Logging enabled.]-->
			<param name="Rtabmap/StatisticLoggedHeaders" value="true"/>             <!--[Add column header description to log files.]-->
			<param name="Rtabmap/StatisticLogsBufferedInRAM" value="true"/>         <!--[Statistic logs buffered in RAM instead of written to hard drive after each iteration.]-->
			<param name="Rtabmap/TimeThr" value="0"/>                               <!--[Maximum time allowed for the detector (ms) (0 means infinity).]-->
			<param name="Rtabmap/VhStrategy" value="0"/>                            <!--[None 0, Similarity 1, Epipolar 2.]-->
			<param name="Rtabmap/WorkingDirectory" value="/home/taeho/.ros"/>       <!--[Working directory.]-->
			
			<param name="Vis/BundleAdjustment" value="0"/>                          <!--[Optimization with bundle adjustment: 0=disabled, 1=g2o, 2=cvsba.]-->
<!---->		<param name="Vis/CorType" value="0"/>                                   <!--[Correspondences computation approach: 0=Features Matching, 1=Optical Flow]-->
				<param name="Vis/CorFlowEps" value="0.01"/>                             <!--[[Vis/CorType=1] See cv::calcOpticalFlowPyrLK(). Used for optical flow approach.]-->
				<param name="Vis/CorFlowIterations" value="30"/>                        <!--[[Vis/CorType=1] See cv::calcOpticalFlowPyrLK(). Used for optical flow approach.]-->
				<param name="Vis/CorFlowMaxLevel" value="3"/>                           <!--[[Vis/CorType=1] See cv::calcOpticalFlowPyrLK(). Used for optical flow approach.]-->
				<param name="Vis/CorFlowWinSize" value="16"/>                           <!--[[Vis/CorType=1] See cv::calcOpticalFlowPyrLK(). Used for optical flow approach.]-->
				<param name="Vis/CorGuessWinSize" value="20"/>                          <!--[[Vis/CorType=0] Matching window size (pixels) around projected points when a guess transform is provided to find correspondences. 0 means disabled.]-->
				<param name="Vis/CorNNDR" value="0.6"/>                                 <!--[[Vis/CorType=0] NNDR: nearest neighbor distance ratio. Used for features matching approach.]-->
				<param name="Vis/CorNNType" value="1"/>                                 <!--[[Vis/CorType=0] kNNFlannNaive=0, kNNFlannKdTree=1, kNNFlannLSH=2, kNNBruteForce=3, kNNBruteForceGPU=4. Used for features matching approach.]-->
<!---->		<param name="Vis/EstimationType" value="1"/>                            <!--[Motion estimation approach: 0:3D->3D, 1:3D->2D (PnP), 2:2D->2D (Epipolar Geometry)]-->
				<param name="Vis/EpipolarGeometryVar" value="0.02"/>                    <!--[[Vis/EstimationType = 2] Epipolar geometry maximum variance to accept the transformation.]-->
				<param name="Vis/PnPFlags" value="0"/>                                  <!--[[Vis/EstimationType = 1] PnP flags: 0=Iterative, 1=EPNP, 2=P3P]-->
				<param name="Vis/PnPRefineIterations" value="1"/>                       <!--[[Vis/EstimationType = 1] Refine iterations.]-->
				<param name="Vis/PnPReprojError" value="2"/>                            <!--[[Vis/EstimationType = 1] PnP reprojection error.]-->
				<param name="Vis/InlierDistance" value="0.1"/>                          <!--[[Vis/EstimationType = 0] Maximum distance for feature correspondences. Used by 3D->3D estimation approach.]-->
				<param name="Vis/RefineIterations" value="5"/>                          <!--[[Vis/EstimationType = 0] Number of iterations used to refine the transformation found by RANSAC. 0 means that the transformation is not refined.]-->
<!---->		<param name="Vis/FeatureType" value="2"/>                               <!--[0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK 8=GFTT/ORB.]-->
<!---->		<param name="Vis/ForwardEstOnly" value="false"/>                         <!--[Forward estimation only (A->B). If false, a transformation is also computed in backward direction (B->A), then the two resulting transforms are merged (middle interpolation between the transforms).]-->
<!---->		<param name="Vis/Iterations" value="10"/>                              <!--[Maximum iterations to compute the transform.]-->
			<param name="Vis/MaxDepth" value="0"/>                                  <!--[Max depth of the features (0 means no limit).]-->
<!---->		<param name="Vis/MaxFeatures" value="50"/>                            <!--[0 no limits.]-->
			<param name="Vis/MinDepth" value="0"/>                                  <!--[Min depth of the features (0 means no limit).]-->
			<param name="Vis/MinInliers" value="40"/>                               <!--[Minimum feature correspondences to compute/accept the transformation.]-->
			<param name="Vis/RoiRatios" value="0.0 0.0 0.0 0.0"/>                   <!--[Region of interest ratios [left, right, top, bottom].]-->
			<param name="Vis/SubPixEps" value="0.02"/>                              <!--[See cv::cornerSubPix().]-->
			<param name="Vis/SubPixIterations" value="0"/>                          <!--[See cv::cornerSubPix(). 0 disables sub pixel refining.]-->
			<param name="Vis/SubPixWinSize" value="3"/>                             <!--[See cv::cornerSubPix().]-->
		</node>

		<!-- Start Odom_combine -->
		<node pkg="robot_localization" type="ekf_localization_node" name="ekf_node" clear_params="true">
			<rosparam command="load" file="$(find turtlebot3_bringup)/params/ekf_params.yaml"/> 	
		</node>

		
		<!-- Visualization rtabmapviz -->
		<node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(arg rtabmapviz_cfg)" output="screen">
			<param name="subscribe_depth"             type="bool" value="true"/>
			<param name="subscribe_scan"              type="bool" value="false"/>
			<param name="frame_id"                    type="string" value="$(arg base_frame_id)"/>
			<param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/> 
			<param name="queue_size"				  type="int"	value="100"/>

			<remap from="/rtabmap/odom"	  to="$(arg odom_topic)"/> 
			<remap from="rgb/image"       to="/kinect2/$(arg resolution)/image_color_rect"/>
			<remap from="depth/image"     to="/kinect2/$(arg resolution)/image_depth_rect"/>
			<remap from="rgb/camera_info" to="/kinect2/$(arg resolution)/camera_info"/>
		</node>

		<!-- Start Rviz -->
		<!--node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot3_navigation)/launch/rviz/turtlebot3_nav.rviz"/-->

		<!-- Visualization RVIZ -->
		<node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="$(arg rviz_cfg)"/>

		<!-- sync cloud with odometry and voxelize the point cloud (for fast visualization in rviz) -->
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="screen"/>
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="data_odom_sync" args="load rtabmap_ros/data_odom_sync standalone_nodelet">
			<remap from="rgb/image"       to="/kinect2/$(arg resolution)/image_color_rect"/>
			<remap from="depth/image"     to="/kinect2/$(arg resolution)/image_depth_rect"/>
			<remap from="rgb/camera_info" to="/kinect2/$(arg resolution)/camera_info"/>

			<remap from="odom_in"             to="$(arg odom_topic)"/>

			<param name="approx_sync" type="bool" value="false"/>

			<remap from="rgb/image_out"       to="data_odom_sync/image"/>
			<remap from="depth/image_out"     to="data_odom_sync/depth"/>
			<remap from="rgb/camera_info_out" to="data_odom_sync/camera_info"/>
			<remap from="odom_out"            to="odom_sync"/>
		</node>

		<!--node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load rtabmap_ros/point_cloud_xyzrgb standalone_nodelet">
			<remap from="rgb/image"       to="data_odom_sync/image"/>
			<remap from="depth/image"     to="data_odom_sync/depth"/>
			<remap from="rgb/camera_info" to="data_odom_sync/camera_info"/>
			<remap from="cloud"           to="voxel_cloud" />

			<param name="voxel_size" type="double" value="0.01"/>
		</node-->

	</group>
</launch>
